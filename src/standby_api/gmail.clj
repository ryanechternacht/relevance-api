(ns standby-api.gmail
  (:require [clj-http.client :as http]
            [clojure.string :as str]
            [standby-api.chatgpt :as chatgpt])
  (:import java.util.Base64))

(def access-token "ya29.a0AcM612xD_xGXYAJWFGh6r9UvCErtmqev2GCKAIxcf2-52cNLxLFe5Hvb9htNoiUReTNsdaoIMsaeqgySN99hCyDia7c0uX5gRZRZ_WLmHHd8gVkehW4fcl9mGDwRpu4jU3-QmZb4xzH5cwlrVRtSZvX7hfm-0Lg6N3nyQZNVaCgYKAX0SARESFQHGX2Mi68f2gU8z8qtew9s0IiTXzQ0175")

(defn- gmail-api-get [access-token url]
  (-> (http/get (str "https://www.googleapis.com/gmail/v1/" url)
                {:as :json
                 :accept :json
                 :content-type :json
                 :oauth-token access-token})
      :body))

  ;; I'm not convinced this is quite right, but it's probably mostly right
(defn- get-domain-from-email [email]
  (-> email
      (str/split #"@")
      second
      (str/replace #">" "")))

(defn- is-sender-external? [{:keys [email]} from-email]
  (= (get-domain-from-email email) (get-domain-from-email from-email)))

(comment
  (get-domain-from-email "ryan@sharepage.io")
  (get-domain-from-email "Notion <notify@mail.notion.so>")

  (is-sender-external? {:email "ryan@sharepage.io"} "tom@sharepage.io")
  (is-sender-external? {:email "ryan@sharepage.io"} "tom@swaypage.io")
  ;
  )

(defn base64-url-decode [to-decode]
  (-> to-decode
      (str/replace #"-" "+")
      (str/replace #"_" "/")
      (#(.decode (Base64/getDecoder) %))
      String.))

(defn- get-body-text 
  "Pass in a gmail message object and this will extract the body text. This handles
   one part emails (where the body text is in :body) or multi-part emails where the body
   text is separated across multiple :parts. Finally, we will base64url decode the response
   to return a blob in plaintext (which will often be html)"
  [{{body :body parts :parts} :payload}]
  (if body
    (-> body
        :data
        base64-url-decode)
    (->> parts
         (map #(get-in % [:body :data]))
         (map base64-url-decode)
         str/join)))

(comment
  (get-body-text {:payload {:parts [{:partId "0",
                                     :body {:size 1933,
                                            :data "SGkgdGhlcmUsDQoNCkluIHRvZGF54oCZcyB3b3JsZCwgdGhlcmUgYXJlIGNvdW50bGVzcyBtZXRyaWNzIG91dCB0aGVyZSB0byBtZWFzdXJlIHByb2R1Y3Qgc3VjY2Vzcy4gVGhlIHF1ZXN0aW9uIGlz4oCTIHdoaWNoIG1ldHJpY3MgbWF0dGVyIG1vc3Q_DQoNCkluc3RlYWQgb2YgbWFraW5nIHlvdSBndWVzcywgaGVyZeKAmXMgYSB0cmllZCBhbmQgdGVzdGVkIGZyYW1ld29yayB0aGF0IHdpbGwgaGVscCB5b3UgdHJhY2sgdGhlIDUga2V5IGluZGljYXRvcnMgb2YgcHJvZHVjdCBvciB3ZWJzaXRlIHN1Y2Nlc3M6DQoNCg0KCS0gQnJlYWR0aA0KCS0gRGVwdGgNCgktIFVzZWFiaWxpdHkNCgktIEZyZXF1ZW5jeQ0KCS0gU2VudGltZW50DQpQYWNrZWQgd2l0aCBpbmR1c3RyeSB0aXBzLCBzaW1wbGUgYnJlYWtkb3ducywgYW5kIG1ldHJpY3MgdG8gYXZvaWQsIHRoaXMgZ3VpZGUgaXMgaGVyZSB0byBoZWxwIHlvdSBtZWFzdXJlIGFuZCBpbXByb3ZlIHlvdXIgcHJvZHVjdCBhbmQgb3ZlcmFsbCBidXNpbmVzcyBwZXJmb3JtYW5jZS4NCg0KVG8gYWNjZXNzIHlvdXIgY29weSBvZiB0aGUgZ3VpZGUsIHNpbXBseSBjbGljayBiZWxvdy4NCkJlc3QsDQpDb25uaWUNCkhlYXAgaXMgdGhlIGZ1dHVyZSBvZiBkaWdpdGFsIGluc2lnaHRzLiBCYWNrZWQgYnkgdGhlIG1vc3QgY29tcGxldGUgZGF0YXNldCwgd2UgaWxsdW1pbmF0ZSBoaWRkZW4gaW5zaWdodHMgc28gdGVhbXMgY2FuIGNyZWF0ZSB0aGUgYmVzdCBwb3NzaWJsZSBkaWdpdGFsIGV4cGVyaWVuY2VzIHRvIGFjY2VsZXJhdGUgdGhlaXIgYnVzaW5lc3MuDQpQcm9kdWN0cyA8aHR0cHM6Ly9tYWlsLmhlYXBhbmFseXRpY3MuY29tL05qSXlMVmhKVUMwNE16Y0FBQUdWZ05oN2JUa19JdWRfMnI2U09OeVRCdE5aRGdqdHhHRzRTMGwwNE4tZTlXOGZaYl9odXE0T0V5M0xoTlpncnBiVGFTeS13YVE9Pg0KU29sdXRpb25zIDxodHRwczovL21haWwuaGVhcGFuYWx5dGljcy5jb20vTmpJeUxWaEpVQzA0TXpjQUFBR1ZnTmg3YmNfOTg3NUctbm5icFNOM2NZVWlVcTBVX24wX2V3Qm91SHJvUkVpNTh4QWxTN3JpT3hPcXBIZzNrNVo5ZW5VazkzOD0-DQpDdXN0b21lcnMgPGh0dHBzOi8vbWFpbC5oZWFwYW5hbHl0aWNzLmNvbS9Oakl5TFZoSlVDMDRNemNBQUFHVmdOaDdiYjk5YjIzWmxkREdDREVuaEJXZnA3MFZYZmg3MW1FNEZaTXhKRHdHaEgzQW9hU2VKVEUzLUw5VTR0bG01czJ5aVM0PT4NClByaWNpbmcgPGh0dHBzOi8vbWFpbC5oZWFwYW5hbHl0aWNzLmNvbS9Oakl5TFZoSlVDMDRNemNBQUFHVmdOaDdiUk9vUnlFUi1jQm1XSW9RaUt6M3VoQW81c2NuS3NnQWxxSXhydjdXRGFNZE1QWG9OcVQ2WTRKRGgtbUI2X2VISVd3PT4NClJlc291cmNlcyA8aHR0cHM6Ly9tYWlsLmhlYXBhbmFseXRpY3MuY29tL05qSXlMVmhKVUMwNE16Y0FBQUdWZ05oN2JSbk41V1RuLWozMkJYM3lJVjZmc0tyUXNXa0tMdTFzWHB4RURaSGQ3SXJZVDNTaDZuVWU0NG9TSjFURkZXTWRWVG89Pg0KUGFydG5lcnMgPGh0dHBzOi8vbWFpbC5oZWFwYW5hbHl0aWNzLmNvbS9Oakl5TFZoSlVDMDRNemNBQUFHVmdOaDdiY0FEZXBUMFhrMFh3ZldZcURrRmNxdVAtbzZpNVpNNGRVc1dhV0JNZS0wWUtEaXMxdC1DVTJzSGkwVTJmZk1CbW9JPT4NCg0KVGhpcyBlbWFpbCB3YXMgc2VudCB0byByeWFuQHNoYXJlcGFnZS5pby4gSWYgeW91IG5vIGxvbmdlciB3aXNoIHRvIHJlY2VpdmUgdGhlc2UgZW1haWxzIHlvdSBtYXkgdW5zdWJzY3JpYmUgaGVyZTogaHR0cHM6Ly9pbmZvLmhlYXAuaW8vVW5zdWJzY3JpYmVQYWdlLmh0bWw_bWt0X3Vuc3Vic2NyaWJlPTEmbWt0X3Rvaz1Oakl5TFZoSlVDMDRNemNBQUFHVmdOaDdiZnFha2xSNWRaelVqYWJuRzI2ZzhkaVp4a3BQZWZtbVVIUVNocHR5S09vNGFteGpncGhlM3VNZlZoa01yYnNsSXZMWlplSmFPc3ZLaDV2N3czQk9SU3JMNzVGOGtYYmpOZTVPM3dOZURvSS4NCg=="}},
                                    {:partId "1",
                                     :body {:size 27092,
                                            :data "PCFkb2N0eXBlIGh0bWw-DQo8aHRtbCBsYW5nPSJlbiIgeG1sbnM6bz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlIiB4bWxuczp2PSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbCI-DQo8aGVhZD4gDQo8dGl0bGU-PC90aXRsZT4gDQo8bWV0YSBuYW1lPSJjb2xvci1zY2hlbWUiIGNvbnRlbnQ9ImxpZ2h0IGRhcmsiPiANCjxtZXRhIG5hbWU9InN1cHBvcnRlZC1jb2xvci1zY2hlbWVzIiBjb250ZW50PSJsaWdodCBkYXJrIj4gDQo8IS0tIEdsb2JhbCBWYXJpYWJsZXMgLS0-ICAgICAgICAgIA0KPCEtLSBMb2NhbCBWYXJpYWJsZXMgLS0-ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCjxtZXRhIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD11dGYtOCIgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIj4gDQo8bWV0YSBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIiBuYW1lPSJ2aWV3cG9ydCI-IA0KPCEtLVtpZiBtc29dPg0KICAgICAgPHhtbD4NCiAgICAgICAgIDxvOk9mZmljZURvY3VtZW50U2V0dGluZ3M-DQogICAgICAgICAgICA8bzpQaXhlbHNQZXJJbmNoPjk2PC9vOlBpeGVsc1BlckluY2g-DQogICAgICAgICAgICA8bzpBbGxvd1BORy8-DQogICAgICAgICA8L286T2ZmaWNlRG9jdW1lbnRTZXR0aW5ncz4NCiAgICAgIDwveG1sPg0KICAgICAgPCFbZW5kaWZdLS0-IA0KPHN0eWxlPg0KICAgICAgICAgKiB7DQogICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICAgICAgICAgfQ0KICAgICAgICAgYm9keSB7DQogICAgICAgICBtYXJnaW46IDA7DQogICAgICAgICBwYWRkaW5nOiAwOw0KICAgICAgICAgfQ0KICAgICAgICAgYm9keSBwIGEgew0KICAgICAgICAgICAgY29sb3I6ICMzMUQ4OTEgIWltcG9ydGFudDsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogaW5oZXJpdCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQgIWltcG9ydGFudDsNCiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBpbmhlcml0ICFpbXBvcnRhbnQ7DQogICAgICAgICAgICBsaW5lLWhlaWdodDogaW5oZXJpdCAhaW1wb3J0YW50Ow0KICAgICAgICB9DQogICAgICAgICAgYVt4LWFwcGxlLWRhdGEtZGV0ZWN0b3JzXSB7DQogICAgICAgICAgICBjb2xvcjogIzMxRDg5MSAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0ICFpbXBvcnRhbnQ7DQogICAgICAgICAgICBmb250LWZhbWlseTogaW5oZXJpdCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGluaGVyaXQgIWltcG9ydGFudDsNCiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBpbmhlcml0ICFpbXBvcnRhbnQ7DQogICAgICAgIH0NCiAgICAgICAgdSArICNib2R5IHAgYSB7DQogICAgICAgICAgICBjb2xvcjogIzMxRDg5MSAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0ICFpbXBvcnRhbnQ7DQogICAgICAgICAgICBmb250LWZhbWlseTogaW5oZXJpdCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGluaGVyaXQgIWltcG9ydGFudDsNCiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBpbmhlcml0ICFpbXBvcnRhbnQ7DQogICAgICAgIH0NCiAgICAgICAgI01lc3NhZ2VWaWV3Qm9keSBwIGEgew0KICAgICAgICAgICAgY29sb3I6ICMzMUQ4OTEgIWltcG9ydGFudDsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogaW5oZXJpdCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQgIWltcG9ydGFudDsNCiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBpbmhlcml0ICFpbXBvcnRhbnQ7DQogICAgICAgICAgICBsaW5lLWhlaWdodDogaW5oZXJpdCAhaW1wb3J0YW50Ow0KICAgICAgICB9DQogICAgICAgICBwIHsNCiAgICAg"}}]}})
  
  (get-body-text {:payload {:body {:size 10328,
                                   :data ""}}})
  ;
  )

(defn is-thread-outreach?
  "handles this email thread. if the thread is new (only 1 email), from an external sender,
   and contains a sales email (using ai), we return true. otherwise, false"
  [access-token user thread-id]
  (let [{:keys [messages]} (gmail-api-get access-token (str "users/me/threads/" thread-id))
        first-message (->> messages first)
        from-email (->> first-message :payload :headers (filter #(= "From" (:name %))) first :value)]
    (cond
      (> (count messages) 1) false
      (is-sender-external? user from-email) true
      (chatgpt/is-this-a-sales-email? (get-body-text first-message)) true
      :else false)))

(comment
  (is-thread-outreach? access-token {:email "ryan@sharepage.io"} "191e741921361a53")
  ;
  )
